Linux - Emacs/Emacspeak and Braille implementation for latex-access

Daniel Dalton <daniel.dalton10@gmail.com>

ABOUT: 

Implement latex-access under gnu/emacs, so it is usable with emacs under
Linux.

The basic structure: 
* Normal behaviour takes place if latex-access is disabled. 
* Line navigation functions voice the line in question through the
latex-access translation. This means all line movement (with the arrows,
c-p, c-n, and c-e up/down in emacspeak all voice the line with the
latex-access translation.) c-u (prefix arguments are supported)
* The Braille display is updated as you type, or as the point is
moved.
* Speech is spoken via emacspeak, and Braille translation is provided in
the echo area.
* An autohook exists to load this functionality automatically if we are
visiting a LaTeX file. 
(of course you can toggle the functionality when desired though with
m-x toggle-latex-access-* functions. There are also latex-access-*-on and
latex-access-*-off functions.)
* Toggle of Brailling dollar signs in nemeth Braille translation (m-x toggle-latex-access-dollars-braille)
* Toggle of speaking dollar signs. (m-x toggle-latex-access-dollars-speech)
* Support for the preprocessor functions 
* Support for selecting an entire region and getting a Nemeth
translation in a separate buffer in another window. This functionality
is available from the latex-access-eq function. This is good for multi
line equations.
* Support for showing the currently selected line in the echo area, but
a number of prior lines above the currently selected line can also be
shown in the echo area above the translation for the current line. This
functionality is controlled by the variable latex-access-linesabove --
specify how many lines above the current one should also appear in the
echo area with a translation.
* Matrix support through emacspeak tables.

INSTALLATION:

I have built an installation script titled "setup.py found in the emacs
branch of this svn checkout (the same directory as this README.)

Invoking with no arguments will install to ~/.emacs, otherwise if you know
what your doing and use an init file somewhere else, feel free to invoke
the script as follows:
python setup.py <path-to-init-file>

Most users who are happy with the default (~/.emacs), may just invoke
the script as follows:
python setup.py 

You may as well say yes to the prompt (y), to byte-compile
emacs-latex-access... This should improve the speed slightly. If it
fails or you do not want to byte compile the script can handle this
fine. (It modifies your init file according to whether it could
byte-compile or not.)

Continue following the prompts until the script has finished.

Then copy and paste the export PYTHONPATH= line generated by the script
to your ~/.bash_profile file, or equivalent. Ensure the PYTHONPATH
variable is set before emacs is started.

Having done this, you may skip to step 2 (installing pymacs).

1. This step only needs to be done if you wish to install manually,
otherwise if you used the provided script, please skip to step 2.

Add the following to ~/.emacs. Change /path/to/svnroot to the actual
path to your svn local checkout. Eg. the directory containing the bulk
of the *.py files and the general readme.txt file.
Below lines should be appended to your .emacs.

; Emacs latex-access:
(setq latex-access-path "/path/to/svnroot")
(load (concat latex-access-path "/emacs/emacs-latex-access.el"))
(add-hook 'LaTeX-mode-hook 'latex-access-speech-on) ; comment this if you don't have emacspeak
(add-hook 'LaTeX-mode-hook 'latex-access-braille-on) ; comment if you don't have Braille 
; End emacs Latex-access.

Note: Keep this structure if you wish to have the uninstall script work
with this installation.

See the comments if you don't have Braille or emacspeak present.

If you wish to use a byte-compiled file, for improved speed, replace .el
with .elc in the line:
(load (concat latex-access-path "/emacs/emacs-latex-access.el"))

To byte-compile the emacs-latex-access.el file, do:
emacs -batch -f batch-byte-compile emacs-latex-access.el
(From this directory, the emacs branch of the svn checkout)

Append to the PYTHONPATH environment variable the directory
/path/to/svnroot, replacing /path/to/svnroot with the actual path to
your svn checkout of latex-access.
This is usually done by an export line in .bash_profile.

2. Please install pymacs. 
On debian/ubuntu you may do:
sudo apt-get install pymacs 
Otherwise follow the instructions provided at:
http://pymacs.progiciels-bpi.ca/

3. Restart emacs!
Now emacs should communicate correctly with latex-access.

4. If you wish to place any settings in your .emacs for latex-access,
place them under the line 
; end latex-access

A. To set how many linesabove the currently selected line should also be
translated add this line anywhere below 
; end latex-access 
(setq latex-access-linesabove 1)

This would Braille the current line and the one above, change 1 to
whatever setting you desire. 0 is just the current line.

HOW TO USE:

Using any form of line navigation including emacspeak commands will
speak the line in question as a latex-access translation. Braille is
updated in the echo area as you type or move. 
To see the Braille translation constantly without the display jumping
back to the LaTeX source, turn off cursor tracking in BRLTTY.

Editing works as usual, just edit the LaTeX source, and of course cursor
routing works on the LaTeX source text. As you edit the echo area will
be updated with a Braille translation.

A hook also exists loading the functionality whenever you visit a
LaTeX file.

You can call most of the latex-access- functions interactively through
m-x. Consistant key bindings will be introduced. 

* toggle speech on/off use m-x toggle-latex-access-speech
* Toggle Braille on/off use m-x toggle-latex-access-braille 
* toggle dollars use m-x toggle-latex-access-dollars-speech or
  m-x toggle-latex-access-dollars-braille.
* The preprocessor functions are under latex-access-preprocessor-* --
  use tab completion to find out what functions are available.
* multiple line equations or just emacs regions for that matter may be
  all translated at once into a new buffer for you to review in a
  separate window to use this functionality.
1. Mark the beginning of the region with c-space (for example the
  beginning of a multiple line equation), but any region is ok. 
2. Move to the end of the area you wish to translate.
3. Type m-x latex-access-eq and review the multi line translation at
  your leasure in the buffer in other window. Note this buffer is erased
  each time latex-access-eq is called, furthermore focus is placed in
  this buffer when you call latex-access-eq.
* Multiple translations can be displayed in the echo area. For example,
  you may have the current line and the prior line both translated into
  nemeth on the echo area. The current line is always at the bottom, and
  the line above is second from the bottom etc. This is useful for
  working with equations. Set latex-access-linesabove with the
  set-variable function to set how many lines above the current one
  should be displayed. 0 is just the current line, 1 is the current line
  + the 1 above etc. I personally wouldn't go beyond 3, but I believe
  the echo area may support up to 10.
  The currently selected line is updated as you move or edit.
  You may also set this variable (latex-access-linesabove) in your init
  file. To do this, see the installation instructions.
* Matrix support, to use this functionality:
A. Mark the beginning of a Matrix (not the \begin line, but the line
  below).
B. Move the emacs point (cursor), to the end of the matrix.
C. m-x latex-access-matrix 
D. You are presented with an emacspeak table buffer. Use emacspeak table
  navigation commands to move about the matrix. Consult the emacspeak
  documentation if you are unsure, but here are a few to get you
  started:
* up prior row 
* down next row 
* left backward cell 
* right forward cell 
* c-u arguments are supported to repeat a certain command multiple
  times.

UNINSTALL:

Run 
python uninstall_latex_access.py 
If your installation is in ~/.emacs.

Or if it is elsewhere, invoke the script like this:
python uninstall_latex_access.py <path-to-init-file>

MANUAL REMOVAL: 

You only need to do this if you don't use the provided uninstall script.

Remove/comment the latex-access code from .emacs. Once this is done, the
files in svn will no longer be called or used by emacs. Hence, all
latex-access functionality will be removed from emacs. It is then safe
to remove the checked out svn directory if you wish. 

You can of course remove the export PYTHONPATH line from your
.bash_profile if you wish, though leaving it will do no harm.

Last Updated: 21 December 2010 by Daniel Dalton

